g
g <- ggplot(mtcars, aes(x = am, y = mpg))+geom_boxplot()
g
class(mtcars$am)
{
mtcars$am <- as.factor(mtcars$am)
}
```{r, echo = FALSE)}
g <- ggplot(mtcars, aes(x = am, y = mpg))+geom_boxplot()
g
?mtcars
setattr(mtcars$am,"levels",c("Auto", "Manual"))
levels(mydt$value) <- c("Auto", "Manual"))
levels(mydt$value) <- c("Auto", "Manual")
levels(mtcars$am) <- c("Auto", "Manual")
head(mtcars)
colnames(mtcars$am) <- "Transmission"
?colnames
colnames(mtcars)[9] <- "Transmission"
head(mtcars)
head(mtcars,20)
?mtcars
g <- ggplot(mtcars, aes(x = Transmission , y = mpg))+geom_boxplot()
g
mpg.lm = lm(mgp ~ transmission, data = mtcars)
mpg.lm = lm(mpg ~ transmission, data = mtcars)
mpg.lm = lm(mpg ~ Transmission, data = mtcars)
mpg.lm
library(caret)
library(mlbench)
data("Sonar")
set.seed(107)
inTrain <- createDataPartition(y = Sonar$Class,)
inTrain <- createDataPartition(y = Sonar$Class, p = .75, list = FALSE)
str(inTrain)
training <- Sonar[inTrain,]
testing <- Sonar[ -inTrain,]
plsFit <- train( Class ~ ., data = training, method = "pls", preProc = c("center", "scale"))
swirl()
library(swirl)
swirl()
rpg1()
makelms <- function(x1, x2, x3){
makelms <- function(x1, x2, x3){
# Simulate a dependent variable, y, as x1
# plus a normally distributed error of mean 0 and
# standard deviation .3.
y <- x1 + rnorm(length(x1), sd = .3)
# Find the coefficient of x1 in 3 nested linear
# models, the first including only the predictor x1,
# the second x1 and x2, the third x1, x2, and x3.
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
}
# Regressor generation process 1.
rgp1 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducibility
set.seed(4321)
# Point A
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
# Point B
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
# Regressor generation process 2.
rgp2 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducibility
set.seed(4321)
# Point C
x1 <- rnorm(n)
x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2)
# Point D
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
makelms <- function(x1, x2, x3){
# Simulate a dependent variable, y, as x1
# plus a normally distributed error of mean 0 and
# standard deviation .3.
y <- x1 + rnorm(length(x1), sd = .3)
# Find the coefficient of x1 in 3 nested linear
# models, the first including only the predictor x1,
# the second x1 and x2, the third x1, x2, and x3.
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
}
# Regressor generation process 1.
rgp1 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducibility
set.seed(4321)
# Point A
x1 <- rnorm(n)
x2 <- rnorm(n)
x3 <- rnorm(n)
# Point B
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
# Regressor generation process 2.
rgp2 <- function(){
print("Processing. Please wait.")
# number of samples per simulation
n <- 100
# number of simulations
nosim <- 1000
# set seed for reproducibility
set.seed(4321)
# Point C
x1 <- rnorm(n)
x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2)
# Point D
betas <- sapply(1 : nosim, function(i)makelms(x1, x2, x3))
round(apply(betas, 1, var), 5)
}
rpg1()
rpg1
View(rgp1)
rgp1()
rpg2()
rgp2()
head(swiss)
mdl <- lm(fertility~.)
?lm
mdl <- lm(fertility~agriculture, data = swiss)
mdl <- lm(Fertility~Agriculture, data = swiss)
mdl <- lm(Fertility~., data = swiss)
vif(mdl)
mdl2 <- lm(Firtility~Agriculture + Education + Catholic + Infant.Mortality)
mdl2 <- lm(Fertility~Agriculture + Education + Catholic + Infant.Mortality)
View(swiss)
View(swiss)
mdl2 <- lm(Fertility~ . -Examination , swiss)
vif(mdl2)
simbias()
x1c <- simbias()
apply(x1c,1,mean)
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, data = swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)/2
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d,2,43,lower.tail = FALSE)
shapiro.test(fit3$residuals)
anova(fit1,fit3,fit5,fit6)
view(ravenData)
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, data = ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, data = ravenData, binomial)
predict(mdl, data.frame(ravenScore = c(0,3,6)))
lodds <- predict(mdl, data.frame(ravenScore = c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
confint(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(.95, 1)
library(swirl)
swirl()
var(rpois(1000,50))
nxt()
head(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[74,]
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
mdl2 <- NULL
mdl2 <- glm(formula = simplystats~date, family = poisson , data = hits, offset = log(visits + 1))
qpois(.95,mdl2$fitted.values[704])
library(ggplot2)
data("mtcars")
str(mtcars)
range(mtcars$drat)
quantile(mtcars$drat)
FirstMDL <- lm(mpg~wt+Transmission+qsec+carb+drat+gear, data = mtcars)
summary(FirstMDL)
library(ggplot2)
data("mtcars")
{
mtcars$am <- as.factor(mtcars$am)
# make the data easier to read
levels(mtcars$am) <- c("Auto", "Manual")
colnames(mtcars)[9] <- "Transmission"
}
g <- ggplot(mtcars, aes(x = Transmission , y = mpg))+geom_boxplot()
g
mtcars_auto <- mtcars[mtcars$Transmission == "Auto",]
mtcars_manual <- mtcars[mtcars$Transmission == "Manual",]
t.test(mtcars_auto$mpg, mtcars_manual$mpg)
colnTransOnlyfit <- lm(mpg~Transmission, data = mtcars)
summary(TransOnlyfit)
TransOnlyfit <- lm(mpg~Transmission, data = mtcars)
summary(TransOnlyfit)
cor(mtcars)[1,]
cor(as.numberic(mtcars)[1,]
)
cor(as.numeric(mtcars)[1,])
corr(as.matrix(mtcars))
cor(as.matrix(mtcars))
# Visual representation of correlation of the variables of mtcars
library(corrgram)
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
cor(mtcars)
cor(mtcars[-Transmission])
dim(mtcars)
library(ggplot2)
data("mtcars")
NewCol <- as.factor(mtcars$am)
levels(NewCol) <- c("Auto", "Manual")
cbind(mtcars, NewCol)
colnames(mtcars) <- "Transmission"
mtcars
library(ggplot2)
data("mtcars")
NewCol <- as.factor(mtcars$am)
levels(NewCol) <- c("Auto", "Manual")
mtcars <- cbind(mtcars, NewCol)
colnames(mtcars[12]) <- "Transmission"
mtcars
colnames(mtcars[12])<- c("Transmission")
mtcars
colnames(mtcars[,12])<- c("Transmission")
colnames(mtcars)[12]<- c("Transmission")
mtcars
library(ggplot2)
data("mtcars")
Transmission <- as.factor(mtcars$am)
levels(NewCol) <- c("Auto", "Manual")
mtcars <- cbind(mtcars, NewCol)
# colnames(mtcars)[12] <- "Transmission"
Transmission <- as.factor(mtcars$am)
levels(NewCol) <- c("Auto", "Manual")
mtcars <- cbind(mtcars,Transmission)
# colnames(mtcars)[12] <- "Transmission"
View(mtcars)
View(mtcars)
mtcars_auto <- mtcars[mtcars$Transmission == "Auto",]
mtcars_manual <- mtcars[mtcars$Transmission == "Manual",]
t.test(mtcars_auto$mpg, mtcars_manual$mpg)
View(mtcars)
View(mtcars)
Transmission <- as.factor(mtcars$am)
levels(Transmission) <- c("Auto", "Manual")
mtcars <- cbind(mtcars,Transmission)
# colnames(mtcars)[12] <- "Transmission"
library(ggplot2)
data("mtcars")
Transmission <- as.factor(mtcars$am)
levels(Transmission) <- c("Auto", "Manual")
mtcars <- cbind(mtcars,Transmission)
# colnames(mtcars)[12] <- "Transmission"
View(mtcars)
View(mtcars)
mtcars_auto <- mtcars[mtcars$Transmission == "Auto",]
mtcars_manual <- mtcars[mtcars$Transmission == "Manual",]
t.test(mtcars_auto$mpg, mtcars_manual$mpg)
cor(mtcars[-12])
cor(mtcars[-12])[1,]
# Visual representation of correlation of the variables of mtcars
library(corrgram)
corrgram(mtcars, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
library(ggplot2)
data("mtcars")
Transmission <- as.factor(mtcars$am)
levels(Transmission) <- c("Auto", "Manual")
mtcars <- cbind(mtcars,Transmission)
# colnames(mtcars)[12] <- "Transmission"
g <- ggplot(mtcars, aes(x = Transmission , y = mpg))+geom_boxplot()
g
mtcars_auto <- mtcars[mtcars$Transmission == "Auto",]
mtcars_manual <- mtcars[mtcars$Transmission == "Manual",]
t.test(mtcars_auto$mpg, mtcars_manual$mpg)
TrainDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
TestDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
RawTraining <- read.csv(url(TrainDataURL))
RawTesting <- read.csv(url(RawTesting))
TrainDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
TestDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
RawTraining <- read.csv(url(TrainDataURL))
RawTesting <- read.csv(url(TestDataURL))
summary(RawTraining)
head(RawTraining)
str(RawTraining[,"kurtosis_roll_belt"])
str(RawTraining[,"skewness_roll_belt"])
summary(RawTraining[,"skewness_roll_belt"])
table(RawTraining$classe)
table(RawTraining$classe)
table(RawTraining$user_name, RawTraining$classe)
require(caret)
require(ggplot2)
?subset
#remove the identifiers not required for training
TrainingData <- RawTraining[,8-160]
#remove the identifiers not required for training
TrainingData <- RawTraining[,8:160]
colnames(TrainingData)
highNA <- sapply(train1, function(x) mean(is.na(x))) > 0.50
highNA <- sapply(TrainngData, function(x) mean(is.na(x))) > 0.50
TrainingData <- RawTraining[,8-160]
highNA <- sapply(TrainngData, function(x) mean(is.na(x))) > 0.50
highNA <- sapply(TraingData, function(x) mean(is.na(x))) > 0.50
highNA <- sapply(TrainingData, function(x) mean(is.na(x))) > 0.50
highNA
TrainDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
TestDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
RawTraining <- read.csv(url(TrainDataURL))
RawTesting <- read.csv(url(TestDataURL))
TrainingData <- RawTraining[,8-160]
#Remove columns with more than 50% NAs
highNA <- sapply(TrainingData, function(x) mean(is.na(x))) > 0.50
TrainingData <- TrainingData[,highNA == FALSE]
TrainingData <- RawTraining[,8-160]
#Remove columns with more than 50% NAs
highNA <- sapply(TrainingData, function(x) mean(is.na(x))) > 0.95
TrainingData <- TrainingData[,highNA == FALSE]
NZV <- nearZeroVar(TrainingData)
NZV <- nearZeroVar(TrainingData)
TrainingData <- TrainingData[,-NZV]
dim(TrainingData)
require(caret)
require(ggplot2)
TrainDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
TestDataURL <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
RawTraining <- read.csv(url(TrainDataURL))
RawTesting <- read.csv(url(TestDataURL))
#remove the identifiers not required for training
TrainingData <- RawTraining[,8-160]
#Remove columns with more than 50% NAs
highNA <- sapply(TrainingData, function(x) mean(is.na(x))) > 0.50
TrainingData <- TrainingData[,highNA == FALSE]
#remove columns with near zero variance
NZV <- nearZeroVar(TrainingData)
TrainingData <- TrainingData[,-NZV]
dim(TrainingData)
#Split data into training and cross validation sets
set.seed(162013)
PartedData <- createDataPartition(y=TrainingData$classe, p = .70, list = FALSE)
Train1 <- TrainingData[PartedData,]
Cross1 <- TrainingData[-PartedData,]
#Split data into training and cross validation sets
set.seed(162013)
PartedData <- createDataPartition(y=TrainingData$classe, p = .70, list = FALSE)
Data_Train <- TrainingData[PartedData,]
Data_Cross <- TrainingData[-PartedData,]
corMatrix <- cor(train1[, -58])
corMatrix <- cor(Data_Train[, -58])
View(Data_Train)
View(Data_Train)
#remove the identifiers not required for training
TrainingData <- RawTraining[,8:160]
#Remove columns with more than 50% NAs
highNA <- sapply(TrainingData, function(x) mean(is.na(x))) > 0.50
TrainingData <- TrainingData[,highNA == FALSE]
#remove columns with near zero variance
NZV <- nearZeroVar(TrainingData)
TrainingData <- TrainingData[,-NZV]
dim(TrainingData)
View(Data_Train)
View(Data_Train)
#Split data into training and cross validation sets
set.seed(162013)
PartedData <- createDataPartition(y=TrainingData$classe, p = .70, list = FALSE)
Data_Train <- TrainingData[PartedData,]
Data_Cross <- TrainingData[-PartedData,]
View(Data_Cross)
View(Data_Cross)
corMatrix <- cor(Data_Train[, -53])
corrplot(corMatrix, order = "FPC", method = "color", type = "lower", tl.cex = 0.8, tl.col = rgb(0, 0, 0))
install.packages("corrplot")
library(corrplot)
library(corrgram)
corrgram(Data_Train, order=TRUE, lower.panel=panel.shade,
upper.panel=panel.pie, text.panel=panel.txt,
main="Correlation for Barbell Lift variables")
corMatrix <- cor(Data_Train[, -53])
corMatrix
library(rpart)
View(Cross1)
View(Cross1)
View(Data_Cross)
View(Data_Cross)
View(Data_Cross)
View(Data_Cross)
fit <- rpart(classe ~ .,
method="class", data=Data_Train)
plotcp(fit)
summary(fit)
TreeMDL <- rpart(classe ~ .,
method="class", data=Data_Train)
predictTree <- predict(Data_Cross, type = "class")
TreeMDL <- rpart(classe ~ .,
method="class", data=Data_Train)
predictTree <- predict(TreeMDL, Data_Cross, type = "class")
predictTree
TreeMDL <- rpart(classe ~ .,
method="class", data=Data_Train)
predictTree <- predict(TreeMDL, Data_Cross, type = "class")
mean(predictTree == Data_Cross[ , last])
TreeMDL <- rpart(classe ~ .,
method="class", data=Data_Train)
predictTree <- predict(TreeMDL, Data_Cross, type = "class")
mean(predictTree == Data_Cross[ ,53])
clustMDL <- kmeans(Data_Train, 25)
?svm
library(e1071)
?svm
SVMMDL <- SVM(classe, Data_Train)
SVMMDL <- svm(classe, Data_Train)
SVMMDL <- svm(Data_Train, classe)
View(Data_Train)
View(Data_Train)
SVMMDL <- svm(classe ~.,data= Data_Train)
PredictSVM <- predict(SVMMDL, Data_Cross, type = "class")
CrossValidationSVM <- mean(PredictSVM == Data_Cross[,53])
require(randomForest)
RForMDL <- randomForest(classe ~. , data=training)
PredictRFor <- predict(RForMDL, Data_Cross, type = "class")
CrossValidationRFor <- mean(PredictRFor == Data_Cross[,53])
RForMDL <- randomForest(classe ~. , data=Data_Train)
PredictRFor <- predict(RForMDL, Data_Cross, type = "class")
CrossValidationRFor <- mean(PredictRFor == Data_Cross[,53])
confusionMatrix(PredictRFor, Data_Cross$classe)
TreeMDL <- rpart(classe ~ .,
method="class", data=Data_Train)
predictTree <- predict(TreeMDL, Data_Cross, type = "class")
CrossValidationTree <- mean(predictTree == Data_Cross[ ,53])
confusionMatrix(PredictRFor, RawTesting$classe)
SelectedMDL <- predict(RForMDL, RawTesting, type = "class")
confusionMatrix(SelectedMDL, RawTesting$classe)
length(SelectedMDL)
View(RawTesting)
View(RawTesting)
SelectedMDL
confusionMatrix(PredictRFor, Data_Cross$classe)
RForMDL$confusion
RForMDL$predicted
RForMDL$type
RForMDL$importance
varImpPlot(fitModel)
varImpPlot(RForMDL)
sort(RForMDL$importance)
(RForMDL$importance)
varImportance <- RForMDL$importance
varImportance <- RForMDL$importanceSD
RForMDL$importanceSD
RForMDL$votes
RForMDL$proximity
RForMDL$forest
RForMDL
summary(RForMDL)
varImportance <- RForMDL$importance
plot(RForMDL$importance)
confusionMatrix(PredictRFor, Data_Cross$classe)
varImpPlot(fitModel)
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
library(knitr)
library(devtools)
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
libary(git)
library(git2r)
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
load(roxygen2)
install.packages("roxygen2")
library(roxygen2)
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
setwd("D:/Repository/Products/NameCommonality/Name_Commonality")
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
publish(user = "GregorUT", repo = "NameCommonalityDocs", host = 'github')
library(curl)
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
publish(user = "GregorUT", repo = "NameCommonalityDocs", host = 'github')
.libPaths( "D:/DataTools/R3.3.2/packages")
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
.libPaths( "c:/R/packages")
publish(title = 'NameCommonality', 'index.html', host = 'rpubs')
